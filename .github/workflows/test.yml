name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        #node-version: [18.x, 20.x]
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci
      #env:
        # Required if you install private packages from npmjs
        # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Run tests with coverage
      run: npm run test:ci

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        use_oidc: true
        fail_ci_if_error: false

    - name: Extract coverage percent
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        pct=$(node -e "console.log(require('./coverage/coverage-summary.json').total.statements.pct)")
        echo "COVERAGE_PCT=$pct" >> $GITHUB_ENV

    - name: Update README with coverage
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        tmp=$(mktemp)
        awk -v repl="Coverage: ${COVERAGE_PCT}%" '
          BEGIN{inblk=0}
          /<!-- COVERAGE:START -->/{print; inblk=1; print "Coverage: " ENVIRON["COVERAGE_PCT"] "%"; next}
          /<!-- COVERAGE:END -->/{inblk=0}
          !inblk{print}
        ' README.md > "$tmp"
        mv "$tmp" README.md

    - name: Commit README update
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "docs(readme): update coverage badge/number"
        file_pattern: README.md

    #- name: Publish Test Results
    #  uses: dorny/test-reporter@v1
      # Run even if tests fail, but skip for forked PRs (cannot create checks there)
    #  if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    #  with:
    #    name: Jest Tests (${{ matrix.node-version }})
    #    path: junit.xml
    #    reporter: jest-junit
    #    fail-on-error: true